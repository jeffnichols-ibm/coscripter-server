# (C) Copyright IBM Corp. 2010

module BrowseHelper
    # return nil if user hasn't rated this procedure
    # otherwise return the rating value
    private
    def myRating(procedure, user)
	ret = Rating.find_by_procedure_and_person(procedure, user)
	if ret.nil?
	    nil
	else
	    ret.rating
	end
    end

    def blog_entry_comments(entry)
    end 
    def blog_date(entry)
        entry.published.to_date.to_s(:long)
    end

    def blog_text(entry,length)
        if length == nil
            return entry.content[0].value
        else
            return entry.content[0].value.split(' ').slice(0..length).join(' ') + '<a href="' + entry.link + '">...</a>'
        end
    end

    # calculate rating
    def get_ratings(procedure, thisuser)
	avg_rating = procedure.averageRating
	if avg_rating.nil?
	    avg_rating = 0
	end

	if thisuser.nil?
	    my_rating = nil
	else
	    my_rating = myRating(procedure, thisuser)
	end

	[avg_rating, my_rating]
    end

  def sortorder_attribute(procedure, sortorder)
    case sortorder
    when 'usage'
      if procedure.last_executed_at.nil?
	return "never run"
      else
	return "last run #{formatSeconds(Time.now.utc - procedure.last_executed_at)} ago"
      end
    when 'created'
      return "created #{formatSeconds(Time.now.utc - procedure.created_at)} ago"
    when 'modified'
      return "last modified #{formatSeconds(Time.now.utc - procedure.modified_at)} ago"
    when 'creator'
      procedure.person.name 
    when 'favorite'
      # no idea what to display 
    when 'rating'
      return "average #{procedure.ratings.average(:rating)} stars"
    when 'popularity'
      recent_executions = "#{procedure.popularity} #{procedure.popularity==1?"time":"times"}"
      return "run #{recent_executions} in the last #{format_days(PopularityRecency.find(:first).days)}"
    end
  end
  
  def recent_reason(procedure,event)
    # describe in a human readable format why something appears in your recent scripts
    # these events and procedures are generated by application.rb#procedures_recently_touched
    if event.instance_of?(Procedure)
      return "last edited #{formatSeconds(Time.now.utc - procedure.modified_at)} ago" 
    elsif event.instance_of?(ProcedureExecute)
      return "last run #{formatSeconds(Time.now.utc - event.executed_at)} ago"
    elsif event.instance_of?(Change)
      return "last changed #{formatSeconds(Time.now.utc - event.modified_at)} ago"
    else
      return ""
    end
  end

  def procedures_info(collection)
    if collection.total_pages < 1
      case collection.size
      when 0; "No scripts found"
      when 1; "Showing 1 script"
      end
    else
       %{Showing scripts %d-%d of %d} % [
	 collection.offset + 1,
	 collection.offset + collection.length,
	 collection.total_entries
       ]
    end


  end
end
